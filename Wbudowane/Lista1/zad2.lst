
zad2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000178  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000005a0  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ca8  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001450  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002026  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <inttypes.h>
#include <stdbool.h>

int main(){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	28 97       	sbiw	r28, 0x08	; 8
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
    UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  aa:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  ae:	87 7e       	andi	r24, 0xE7	; 231
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

    uint8_t pds[8] = {PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7};
  b4:	88 e0       	ldi	r24, 0x08	; 8
  b6:	e0 e0       	ldi	r30, 0x00	; 0
  b8:	f1 e0       	ldi	r31, 0x01	; 1
  ba:	de 01       	movw	r26, r28
  bc:	11 96       	adiw	r26, 0x01	; 1
  be:	01 90       	ld	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	8a 95       	dec	r24
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x28>

    DDRD  = 0b11111111;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a b9       	out	0x0a, r24	; 10
  ca:	be 01       	movw	r22, r28
  cc:	67 5f       	subi	r22, 0xF7	; 247
  ce:	7f 4f       	sbci	r23, 0xFF	; 255
  d0:	8e 01       	movw	r16, r28
  d2:	0e 5f       	subi	r16, 0xFE	; 254
  d4:	1f 4f       	sbci	r17, 0xFF	; 255
  d6:	78 01       	movw	r14, r16
    while(1){
        PORTD = 0b00000000;

        for(int i = 0; i < 8; i++){
            PORTD |= _BV(pds[i]);
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	50 e0       	ldi	r21, 0x00	; 0

    uint8_t pds[8] = {PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7};

    DDRD  = 0b11111111;
    while(1){
        PORTD = 0b00000000;
  dc:	1b b8       	out	0x0b, r1	; 11
  de:	fe 01       	movw	r30, r28
  e0:	31 96       	adiw	r30, 0x01	; 1

        for(int i = 0; i < 8; i++){
            PORTD |= _BV(pds[i]);
  e2:	1b b1       	in	r17, 0x0b	; 11
  e4:	9f 01       	movw	r18, r30
  e6:	ca 01       	movw	r24, r20
  e8:	01 90       	ld	r0, Z+
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <main+0x5a>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <main+0x56>
  f4:	81 2b       	or	r24, r17
  f6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	1f e7       	ldi	r17, 0x7F	; 127
  fa:	89 ea       	ldi	r24, 0xA9	; 169
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	11 50       	subi	r17, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x68>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x72>
 108:	00 00       	nop
            _delay_ms(75);
            PORTD &= ~_BV(pds[i]);
 10a:	9b b1       	in	r25, 0x0b	; 11
 10c:	8a 01       	movw	r16, r20
 10e:	d9 01       	movw	r26, r18
 110:	0c 90       	ld	r0, X
 112:	02 c0       	rjmp	.+4      	; 0x118 <main+0x82>
 114:	00 0f       	add	r16, r16
 116:	11 1f       	adc	r17, r17
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <main+0x7e>
 11c:	80 2f       	mov	r24, r16
 11e:	80 95       	com	r24
 120:	89 23       	and	r24, r25
 122:	8b b9       	out	0x0b, r24	; 11

    DDRD  = 0b11111111;
    while(1){
        PORTD = 0b00000000;

        for(int i = 0; i < 8; i++){
 124:	e6 17       	cp	r30, r22
 126:	f7 07       	cpc	r31, r23
 128:	e1 f6       	brne	.-72     	; 0xe2 <main+0x4c>
 12a:	fe 01       	movw	r30, r28
 12c:	38 96       	adiw	r30, 0x08	; 8
            PORTD |= _BV(pds[i]);
            _delay_ms(75);
            PORTD &= ~_BV(pds[i]);
        }
        for(int i = 6; i > 0; i--){
            PORTD |= _BV(pds[i]);
 12e:	2b b1       	in	r18, 0x0b	; 11
 130:	ca 01       	movw	r24, r20
 132:	02 90       	ld	r0, -Z
 134:	02 c0       	rjmp	.+4      	; 0x13a <main+0xa4>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <main+0xa0>
 13e:	82 2b       	or	r24, r18
 140:	8b b9       	out	0x0b, r24	; 11
 142:	1f e7       	ldi	r17, 0x7F	; 127
 144:	29 ea       	ldi	r18, 0xA9	; 169
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	11 50       	subi	r17, 0x01	; 1
 14a:	20 40       	sbci	r18, 0x00	; 0
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0xb2>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xbc>
 152:	00 00       	nop
            _delay_ms(75);
            PORTD &= ~_BV(pds[i]);
 154:	9b b1       	in	r25, 0x0b	; 11
 156:	9a 01       	movw	r18, r20
 158:	00 80       	ld	r0, Z
 15a:	02 c0       	rjmp	.+4      	; 0x160 <main+0xca>
 15c:	22 0f       	add	r18, r18
 15e:	33 1f       	adc	r19, r19
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <main+0xc6>
 164:	82 2f       	mov	r24, r18
 166:	80 95       	com	r24
 168:	89 23       	and	r24, r25
 16a:	8b b9       	out	0x0b, r24	; 11
        for(int i = 0; i < 8; i++){
            PORTD |= _BV(pds[i]);
            _delay_ms(75);
            PORTD &= ~_BV(pds[i]);
        }
        for(int i = 6; i > 0; i--){
 16c:	ee 16       	cp	r14, r30
 16e:	ff 06       	cpc	r15, r31
 170:	f1 f6       	brne	.-68     	; 0x12e <main+0x98>
 172:	b4 cf       	rjmp	.-152    	; 0xdc <main+0x46>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
